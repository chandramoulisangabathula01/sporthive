name: SportHive CI/CD Workflow

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install project dependencies
        run: npm install

      - name: Execute Jest tests
        run: npm test
        
      - name: Execute Cypress tests
        uses: cypress-io/github-action@v6
        with:
          start: npm run dev
          wait-on: 'http://localhost:5173'
          wait-on-timeout: 120
          config: video=false

  build-image:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          echo "Starting Docker image build..."
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/sporthive:latest .
          echo "Docker image build completed."

      - name: Display Docker images
        run: docker images

      - name: Authenticate Docker Hub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Push Docker image to repository
        run: |
          echo "Uploading Docker image..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/sporthive:latest
          echo "Docker image uploaded successfully."

  send-notification:
    runs-on: ubuntu-latest
    needs: [run-tests, build-image]
    steps:
      - name: Send Discord notification
        if: always()
        run: |
          status=$?
          status_msg="failed"
          if [ $status -eq 0 ]; then
            status_msg="succeeded"
          fi
          echo "Notifying Discord..."

          message="{\"content\": \"CI/CD Pipeline $status_msg. View [GitHub Actions](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions) for details.\"}"

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$message" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

          echo "Notification sent to Discord."

