name: SportHive CI/CD Workflow

# Trigger the workflow on push or pull request events to the master branch
on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

jobs:
  # Job for running tests
  run-tests:
    runs-on: ubuntu-latest

    steps:
      # Step to check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step to set up the Node.js environment
      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step to install project dependencies using npm
      - name: Install project dependencies
        run: npm install

      # Step to execute Jest tests for unit and integration testing
      - name: Execute Jest tests
        run: npm test

      # Step to run Cypress end-to-end tests
      - name: Execute Cypress tests
        uses: cypress-io/github-action@v6
        with:
          start: npm run dev
          wait-on: 'http://localhost:5173'
          wait-on-timeout: 120
          config: video=false

  # Job for building and pushing Docker image
  build-image:
    runs-on: ubuntu-latest
    needs: run-tests

    steps:
      # Step to check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step to build the Docker image for the project
      - name: Build Docker image
        run: |
          echo "Starting Docker image build..."
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/sporthive:latest .
          echo "Docker image build completed."

      # Step to display the list of Docker images
      - name: Display Docker images
        run: docker images

      # Step to authenticate Docker Hub using secrets
      - name: Authenticate Docker Hub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # Step to push the Docker image to Docker Hub
      - name: Push Docker image to repository
        run: |
          echo "Uploading Docker image..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/sporthive:latest
          echo "Docker image uploaded successfully."

  # Job for sending notifications
  send-notification:
    runs-on: ubuntu-latest
    needs: [run-tests, build-image]

    steps:
      # Step to send a notification to Discord with the result of the pipeline
      - name: Send Discord notification
        if: always()
        run: |
          status=$?
          status_msg="failed"
          if [ $status -eq 0 ]; then
            status_msg="succeeded"
          fi
          echo "Notifying Discord..."

          message="{\"content\": \"CI/CD Pipeline $status_msg. View [GitHub Actions](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions) for details.\"}"

          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$message" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

          echo "Notification sent to Discord."
